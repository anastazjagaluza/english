!function(e){var t={};function i(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=e,i.c=t,i.d=function(e,t,o){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(i.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(o,r,function(t){return e[t]}.bind(null,r));return o},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=6)}([function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(2),r=i(3);window.firebase.initializeApp({apiKey:"AIzaSyC4PKlVTVWpQbN4459w9QfO-q3Ta3SzoZs",authDomain:"english-verbs-game.firebaseapp.com",databaseURL:"https://english-verbs-game.firebaseio.com",projectId:"english-verbs-game",storageBucket:"english-verbs-game.appspot.com",messagingSenderId:"878642607039",appId:"1:878642607039:web:e1d0c5a1c6d78c20e8670a",measurementId:"G-NZ5V5BZDXH"});var n=new window.firebase.auth.GoogleAuthProvider;function s(e,t,i){window.firebase.database().ref("users/"+e).set({points:t,name:i})}function a(){localStorage.setItem("isRedirecting",""),window.firebase.auth().signInWithRedirect(n)}n.setCustomParameters({prompt:"select_account"}),window.firebase.auth().languageCode="pl",window.firebase.auth().getRedirectResult().then((function(e){if(e.credential){console.log("logged");let t,i=e.user;window.firebase.database().ref("/users/"+i.uid).once("value").then((function(e){if(null!==e.val()){t=e.val().points;o.showTheGame(i.displayName,i.email,i.uid,t,"Witaj ponownie")}else{t={A2:0,B1:0,B2:0,C1:0,C2:0,All:0},s(i.uid,t,i.displayName);o.showTheGame(i.displayName,i.email,i.uid,t,"Dziękujemy za rejestrację w grze")}localStorage.setItem("user-info",JSON.stringify({user:i})),localStorage.setItem("points",JSON.stringify({points:t}))}))}})).catch((function(e){var t=e.message;console.log(t);r.showLog("Coś poszło nie tak","Spróbuj ponownie za kilka minut",!1,!0)})),t.writeUserData=s,t.reportBugToServer=function(e,t){console.log(t),window.firebase.database().ref("users/"+e).push(t)},t.redirectingSignUp=a,document.querySelector("#nowekonto").addEventListener("click",a),document.querySelector("#zaloguj").addEventListener("click",a),null==localStorage.getItem("isRedirecting")&&document.body.classList.add("ready")},function(e,t,i){"use strict";i.r(t);
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const o=new WeakMap,r=e=>"function"==typeof e&&o.has(e),n=void 0!==window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,s=(e,t,i=null,o=null)=>{for(;t!==i;){const i=t.nextSibling;e.insertBefore(t,o),t=i}},a=(e,t,i=null)=>{for(;t!==i;){const i=t.nextSibling;e.removeChild(t),t=i}},l={},d={},c=`{{lit-${String(Math.random()).slice(2)}}}`,u=`\x3c!--${c}--\x3e`,h=new RegExp(`${c}|${u}`),p="$lit$";class m{constructor(e,t){this.parts=[],this.element=t;const i=[],o=[],r=document.createTreeWalker(t.content,133,null,!1);let n=0,s=-1,a=0;const{strings:l,values:{length:d}}=e;for(;a<d;){const e=r.nextNode();if(null!==e){if(s++,1===e.nodeType){if(e.hasAttributes()){const t=e.attributes,{length:i}=t;let o=0;for(let e=0;e<i;e++)f(t[e].name,p)&&o++;for(;o-- >0;){const t=l[a],i=y.exec(t)[2],o=i.toLowerCase()+p,r=e.getAttribute(o);e.removeAttribute(o);const n=r.split(h);this.parts.push({type:"attribute",index:s,name:i,strings:n}),a+=n.length-1}}"TEMPLATE"===e.tagName&&(o.push(e),r.currentNode=e.content)}else if(3===e.nodeType){const t=e.data;if(t.indexOf(c)>=0){const o=e.parentNode,r=t.split(h),n=r.length-1;for(let t=0;t<n;t++){let i,n=r[t];if(""===n)i=w();else{const e=y.exec(n);null!==e&&f(e[2],p)&&(n=n.slice(0,e.index)+e[1]+e[2].slice(0,-p.length)+e[3]),i=document.createTextNode(n)}o.insertBefore(i,e),this.parts.push({type:"node",index:++s})}""===r[n]?(o.insertBefore(w(),e),i.push(e)):e.data=r[n],a+=n}}else if(8===e.nodeType)if(e.data===c){const t=e.parentNode;null!==e.previousSibling&&s!==n||(s++,t.insertBefore(w(),e)),n=s,this.parts.push({type:"node",index:s}),null===e.nextSibling?e.data="":(i.push(e),s--),a++}else{let t=-1;for(;-1!==(t=e.data.indexOf(c,t+1));)this.parts.push({type:"node",index:-1}),a++}}else r.currentNode=o.pop()}for(const e of i)e.parentNode.removeChild(e)}}const f=(e,t)=>{const i=e.length-t.length;return i>=0&&e.slice(i)===t},g=e=>-1!==e.index,w=()=>document.createComment(""),y=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
class b{constructor(e,t,i){this.__parts=[],this.template=e,this.processor=t,this.options=i}update(e){let t=0;for(const i of this.__parts)void 0!==i&&i.setValue(e[t]),t++;for(const e of this.__parts)void 0!==e&&e.commit()}_clone(){const e=n?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),t=[],i=this.template.parts,o=document.createTreeWalker(e,133,null,!1);let r,s=0,a=0,l=o.nextNode();for(;s<i.length;)if(r=i[s],g(r)){for(;a<r.index;)a++,"TEMPLATE"===l.nodeName&&(t.push(l),o.currentNode=l.content),null===(l=o.nextNode())&&(o.currentNode=t.pop(),l=o.nextNode());if("node"===r.type){const e=this.processor.handleTextExpression(this.options);e.insertAfterNode(l.previousSibling),this.__parts.push(e)}else this.__parts.push(...this.processor.handleAttributeExpressions(l,r.name,r.strings,this.options));s++}else this.__parts.push(void 0),s++;return n&&(document.adoptNode(e),customElements.upgrade(e)),e}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const v=` ${c} `;class k{constructor(e,t,i,o){this.strings=e,this.values=t,this.type=i,this.processor=o}getHTML(){const e=this.strings.length-1;let t="",i=!1;for(let o=0;o<e;o++){const e=this.strings[o],r=e.lastIndexOf("\x3c!--");i=(r>-1||i)&&-1===e.indexOf("--\x3e",r+1);const n=y.exec(e);t+=null===n?e+(i?v:u):e.substr(0,n.index)+n[1]+n[2]+p+n[3]+c}return t+=this.strings[e]}getTemplateElement(){const e=document.createElement("template");return e.innerHTML=this.getHTML(),e}}class x extends k{getHTML(){return`<svg>${super.getHTML()}</svg>`}getTemplateElement(){const e=super.getTemplateElement(),t=e.content,i=t.firstChild;return t.removeChild(i),s(t,i.firstChild),e}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const _=e=>null===e||!("object"==typeof e||"function"==typeof e),z=e=>Array.isArray(e)||!(!e||!e[Symbol.iterator]);class S{constructor(e,t,i){this.dirty=!0,this.element=e,this.name=t,this.strings=i,this.parts=[];for(let e=0;e<i.length-1;e++)this.parts[e]=this._createPart()}_createPart(){return new C(this)}_getValue(){const e=this.strings,t=e.length-1;let i="";for(let o=0;o<t;o++){i+=e[o];const t=this.parts[o];if(void 0!==t){const e=t.value;if(_(e)||!z(e))i+="string"==typeof e?e:String(e);else for(const t of e)i+="string"==typeof t?t:String(t)}}return i+=e[t]}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class C{constructor(e){this.value=void 0,this.committer=e}setValue(e){e===l||_(e)&&e===this.value||(this.value=e,r(e)||(this.committer.dirty=!0))}commit(){for(;r(this.value);){const e=this.value;this.value=l,e(this)}this.value!==l&&this.committer.commit()}}class P{constructor(e){this.value=void 0,this.__pendingValue=void 0,this.options=e}appendInto(e){this.startNode=e.appendChild(w()),this.endNode=e.appendChild(w())}insertAfterNode(e){this.startNode=e,this.endNode=e.nextSibling}appendIntoPart(e){e.__insert(this.startNode=w()),e.__insert(this.endNode=w())}insertAfterPart(e){e.__insert(this.startNode=w()),this.endNode=e.endNode,e.endNode=this.startNode}setValue(e){this.__pendingValue=e}commit(){for(;r(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=l,e(this)}const e=this.__pendingValue;e!==l&&(_(e)?e!==this.value&&this.__commitText(e):e instanceof k?this.__commitTemplateResult(e):e instanceof Node?this.__commitNode(e):z(e)?this.__commitIterable(e):e===d?(this.value=d,this.clear()):this.__commitText(e))}__insert(e){this.endNode.parentNode.insertBefore(e,this.endNode)}__commitNode(e){this.value!==e&&(this.clear(),this.__insert(e),this.value=e)}__commitText(e){const t=this.startNode.nextSibling,i="string"==typeof(e=null==e?"":e)?e:String(e);t===this.endNode.previousSibling&&3===t.nodeType?t.data=i:this.__commitNode(document.createTextNode(i)),this.value=e}__commitTemplateResult(e){const t=this.options.templateFactory(e);if(this.value instanceof b&&this.value.template===t)this.value.update(e.values);else{const i=new b(t,e.processor,this.options),o=i._clone();i.update(e.values),this.__commitNode(o),this.value=i}}__commitIterable(e){Array.isArray(this.value)||(this.value=[],this.clear());const t=this.value;let i,o=0;for(const r of e)void 0===(i=t[o])&&(i=new P(this.options),t.push(i),0===o?i.appendIntoPart(this):i.insertAfterPart(t[o-1])),i.setValue(r),i.commit(),o++;o<t.length&&(t.length=o,this.clear(i&&i.endNode))}clear(e=this.startNode){a(this.startNode.parentNode,e.nextSibling,this.endNode)}}class j{constructor(e,t,i){if(this.value=void 0,this.__pendingValue=void 0,2!==i.length||""!==i[0]||""!==i[1])throw new Error("Boolean attributes can only contain a single expression");this.element=e,this.name=t,this.strings=i}setValue(e){this.__pendingValue=e}commit(){for(;r(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=l,e(this)}if(this.__pendingValue===l)return;const e=!!this.__pendingValue;this.value!==e&&(e?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=e),this.__pendingValue=l}}class A extends S{constructor(e,t,i){super(e,t,i),this.single=2===i.length&&""===i[0]&&""===i[1]}_createPart(){return new N(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class N extends C{}let T=!1;try{const e={get capture(){return T=!0,!1}};window.addEventListener("test",e,e),window.removeEventListener("test",e,e)}catch(e){}class E{constructor(e,t,i){this.value=void 0,this.__pendingValue=void 0,this.element=e,this.eventName=t,this.eventContext=i,this.__boundHandleEvent=e=>this.handleEvent(e)}setValue(e){this.__pendingValue=e}commit(){for(;r(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=l,e(this)}if(this.__pendingValue===l)return;const e=this.__pendingValue,t=this.value,i=null==e||null!=t&&(e.capture!==t.capture||e.once!==t.once||e.passive!==t.passive),o=null!=e&&(null==t||i);i&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),o&&(this.__options=q(e),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=e,this.__pendingValue=l}handleEvent(e){"function"==typeof this.value?this.value.call(this.eventContext||this.element,e):this.value.handleEvent(e)}}const q=e=>e&&(T?{capture:e.capture,passive:e.passive,once:e.once}:e.capture);
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const O=new class{handleAttributeExpressions(e,t,i,o){const r=t[0];if("."===r){return new A(e,t.slice(1),i).parts}return"@"===r?[new E(e,t.slice(1),o.eventContext)]:"?"===r?[new j(e,t.slice(1),i)]:new S(e,t,i).parts}handleTextExpression(e){return new P(e)}};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */function R(e){let t=$.get(e.type);void 0===t&&(t={stringsArray:new WeakMap,keyString:new Map},$.set(e.type,t));let i=t.stringsArray.get(e.strings);if(void 0!==i)return i;const o=e.strings.join(c);return void 0===(i=t.keyString.get(o))&&(i=new m(e,e.getTemplateElement()),t.keyString.set(o,i)),t.stringsArray.set(e.strings,i),i}const $=new Map,V=new WeakMap;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.1.2");const M=(e,...t)=>new k(e,t,"html",O),U=(e,...t)=>new x(e,t,"svg",O),I=133;function L(e,t){const{element:{content:i},parts:o}=e,r=document.createTreeWalker(i,I,null,!1);let n=B(o),s=o[n],a=-1,l=0;const d=[];let c=null;for(;r.nextNode();){a++;const e=r.currentNode;for(e.previousSibling===c&&(c=null),t.has(e)&&(d.push(e),null===c&&(c=e)),null!==c&&l++;void 0!==s&&s.index===a;)s.index=null!==c?-1:s.index-l,s=o[n=B(o,n)]}d.forEach(e=>e.parentNode.removeChild(e))}const W=e=>{let t=11===e.nodeType?0:1;const i=document.createTreeWalker(e,I,null,!1);for(;i.nextNode();)t++;return t},B=(e,t=-1)=>{for(let i=t+1;i<e.length;i++){const t=e[i];if(g(t))return i}return-1};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const F=(e,t)=>`${e}--${t}`;let H=!0;void 0===window.ShadyCSS?H=!1:void 0===window.ShadyCSS.prepareTemplateDom&&(console.warn("Incompatible ShadyCSS version detected. Please update to at least @webcomponents/webcomponentsjs@2.0.2 and @webcomponents/shadycss@1.3.1."),H=!1);const J=e=>t=>{const i=F(t.type,e);let o=$.get(i);void 0===o&&(o={stringsArray:new WeakMap,keyString:new Map},$.set(i,o));let r=o.stringsArray.get(t.strings);if(void 0!==r)return r;const n=t.strings.join(c);if(void 0===(r=o.keyString.get(n))){const i=t.getTemplateElement();H&&window.ShadyCSS.prepareTemplateDom(i,e),r=new m(t,i),o.keyString.set(n,r)}return o.stringsArray.set(t.strings,r),r},D=["html","svg"],G=new Set,X=(e,t,i)=>{G.add(e);const o=i?i.element:document.createElement("template"),r=t.querySelectorAll("style"),{length:n}=r;if(0===n)return void window.ShadyCSS.prepareTemplateStyles(o,e);const s=document.createElement("style");for(let e=0;e<n;e++){const t=r[e];t.parentNode.removeChild(t),s.textContent+=t.textContent}(e=>{D.forEach(t=>{const i=$.get(F(t,e));void 0!==i&&i.keyString.forEach(e=>{const{element:{content:t}}=e,i=new Set;Array.from(t.querySelectorAll("style")).forEach(e=>{i.add(e)}),L(e,i)})})})(e);const a=o.content;i?function(e,t,i=null){const{element:{content:o},parts:r}=e;if(null==i)return void o.appendChild(t);const n=document.createTreeWalker(o,I,null,!1);let s=B(r),a=0,l=-1;for(;n.nextNode();){for(l++,n.currentNode===i&&(a=W(t),i.parentNode.insertBefore(t,i));-1!==s&&r[s].index===l;){if(a>0){for(;-1!==s;)r[s].index+=a,s=B(r,s);return}s=B(r,s)}}}(i,s,a.firstChild):a.insertBefore(s,a.firstChild),window.ShadyCSS.prepareTemplateStyles(o,e);const l=a.querySelector("style");if(window.ShadyCSS.nativeShadow&&null!==l)t.insertBefore(l.cloneNode(!0),t.firstChild);else if(i){a.insertBefore(s,a.firstChild);const e=new Set;e.add(s),L(i,e)}};window.JSCompiler_renameProperty=(e,t)=>e;const Z={toAttribute(e,t){switch(t){case Boolean:return e?"":null;case Object:case Array:return null==e?e:JSON.stringify(e)}return e},fromAttribute(e,t){switch(t){case Boolean:return null!==e;case Number:return null===e?null:Number(e);case Object:case Array:return JSON.parse(e)}return e}},Y=(e,t)=>t!==e&&(t==t||e==e),K={attribute:!0,type:String,converter:Z,reflect:!1,hasChanged:Y},Q=Promise.resolve(!0),ee=1,te=4,ie=8,oe=16,re=32,ne="finalized";class se extends HTMLElement{constructor(){super(),this._updateState=0,this._instanceProperties=void 0,this._updatePromise=Q,this._hasConnectedResolver=void 0,this._changedProperties=new Map,this._reflectingProperties=void 0,this.initialize()}static get observedAttributes(){this.finalize();const e=[];return this._classProperties.forEach((t,i)=>{const o=this._attributeNameForProperty(i,t);void 0!==o&&(this._attributeToPropertyMap.set(o,i),e.push(o))}),e}static _ensureClassProperties(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_classProperties",this))){this._classProperties=new Map;const e=Object.getPrototypeOf(this)._classProperties;void 0!==e&&e.forEach((e,t)=>this._classProperties.set(t,e))}}static createProperty(e,t=K){if(this._ensureClassProperties(),this._classProperties.set(e,t),t.noAccessor||this.prototype.hasOwnProperty(e))return;const i="symbol"==typeof e?Symbol():`__${e}`;Object.defineProperty(this.prototype,e,{get(){return this[i]},set(t){const o=this[e];this[i]=t,this._requestUpdate(e,o)},configurable:!0,enumerable:!0})}static finalize(){const e=Object.getPrototypeOf(this);if(e.hasOwnProperty(ne)||e.finalize(),this[ne]=!0,this._ensureClassProperties(),this._attributeToPropertyMap=new Map,this.hasOwnProperty(JSCompiler_renameProperty("properties",this))){const e=this.properties,t=[...Object.getOwnPropertyNames(e),..."function"==typeof Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(e):[]];for(const i of t)this.createProperty(i,e[i])}}static _attributeNameForProperty(e,t){const i=t.attribute;return!1===i?void 0:"string"==typeof i?i:"string"==typeof e?e.toLowerCase():void 0}static _valueHasChanged(e,t,i=Y){return i(e,t)}static _propertyValueFromAttribute(e,t){const i=t.type,o=t.converter||Z,r="function"==typeof o?o:o.fromAttribute;return r?r(e,i):e}static _propertyValueToAttribute(e,t){if(void 0===t.reflect)return;const i=t.type,o=t.converter;return(o&&o.toAttribute||Z.toAttribute)(e,i)}initialize(){this._saveInstanceProperties(),this._requestUpdate()}_saveInstanceProperties(){this.constructor._classProperties.forEach((e,t)=>{if(this.hasOwnProperty(t)){const e=this[t];delete this[t],this._instanceProperties||(this._instanceProperties=new Map),this._instanceProperties.set(t,e)}})}_applyInstanceProperties(){this._instanceProperties.forEach((e,t)=>this[t]=e),this._instanceProperties=void 0}connectedCallback(){this._updateState=this._updateState|re,this._hasConnectedResolver&&(this._hasConnectedResolver(),this._hasConnectedResolver=void 0)}disconnectedCallback(){}attributeChangedCallback(e,t,i){t!==i&&this._attributeToProperty(e,i)}_propertyToAttribute(e,t,i=K){const o=this.constructor,r=o._attributeNameForProperty(e,i);if(void 0!==r){const e=o._propertyValueToAttribute(t,i);if(void 0===e)return;this._updateState=this._updateState|ie,null==e?this.removeAttribute(r):this.setAttribute(r,e),this._updateState=this._updateState&~ie}}_attributeToProperty(e,t){if(this._updateState&ie)return;const i=this.constructor,o=i._attributeToPropertyMap.get(e);if(void 0!==o){const e=i._classProperties.get(o)||K;this._updateState=this._updateState|oe,this[o]=i._propertyValueFromAttribute(t,e),this._updateState=this._updateState&~oe}}_requestUpdate(e,t){let i=!0;if(void 0!==e){const o=this.constructor,r=o._classProperties.get(e)||K;o._valueHasChanged(this[e],t,r.hasChanged)?(this._changedProperties.has(e)||this._changedProperties.set(e,t),!0!==r.reflect||this._updateState&oe||(void 0===this._reflectingProperties&&(this._reflectingProperties=new Map),this._reflectingProperties.set(e,r))):i=!1}!this._hasRequestedUpdate&&i&&this._enqueueUpdate()}requestUpdate(e,t){return this._requestUpdate(e,t),this.updateComplete}async _enqueueUpdate(){let e,t;this._updateState=this._updateState|te;const i=this._updatePromise;this._updatePromise=new Promise((i,o)=>{e=i,t=o});try{await i}catch(e){}this._hasConnected||await new Promise(e=>this._hasConnectedResolver=e);try{const e=this.performUpdate();null!=e&&await e}catch(e){t(e)}e(!this._hasRequestedUpdate)}get _hasConnected(){return this._updateState&re}get _hasRequestedUpdate(){return this._updateState&te}get hasUpdated(){return this._updateState&ee}performUpdate(){this._instanceProperties&&this._applyInstanceProperties();let e=!1;const t=this._changedProperties;try{(e=this.shouldUpdate(t))&&this.update(t)}catch(t){throw e=!1,t}finally{this._markUpdated()}e&&(this._updateState&ee||(this._updateState=this._updateState|ee,this.firstUpdated(t)),this.updated(t))}_markUpdated(){this._changedProperties=new Map,this._updateState=this._updateState&~te}get updateComplete(){return this._getUpdateComplete()}_getUpdateComplete(){return this._updatePromise}shouldUpdate(e){return!0}update(e){void 0!==this._reflectingProperties&&this._reflectingProperties.size>0&&(this._reflectingProperties.forEach((e,t)=>this._propertyToAttribute(t,this[t],e)),this._reflectingProperties=void 0)}updated(e){}firstUpdated(e){}}se[ne]=!0;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const ae=e=>t=>"function"==typeof t?((e,t)=>(window.customElements.define(e,t),t))(e,t):((e,t)=>{const{kind:i,elements:o}=t;return{kind:i,elements:o,finisher(t){window.customElements.define(e,t)}}})(e,t),le=(e,t)=>"method"!==t.kind||!t.descriptor||"value"in t.descriptor?{kind:"field",key:Symbol(),placement:"own",descriptor:{},initializer(){"function"==typeof t.initializer&&(this[t.key]=t.initializer.call(this))},finisher(i){i.createProperty(t.key,e)}}:Object.assign({},t,{finisher(i){i.createProperty(t.key,e)}}),de=(e,t,i)=>{t.constructor.createProperty(i,e)};function ce(e){return(t,i)=>void 0!==i?de(e,t,i):le(e,t)}function ue(e){return(t,i)=>{const o={get(){return this.renderRoot.querySelector(e)},enumerable:!0,configurable:!0};return void 0!==i?pe(o,t,i):me(o,t)}}function he(e){return(t,i)=>{const o={get(){return this.renderRoot.querySelectorAll(e)},enumerable:!0,configurable:!0};return void 0!==i?pe(o,t,i):me(o,t)}}const pe=(e,t,i)=>{Object.defineProperty(t,i,e)},me=(e,t)=>({kind:"method",placement:"prototype",key:t.key,descriptor:e}),fe=e=>(t,i)=>void 0!==i?((e,t,i)=>{Object.assign(t[i],e)})(e,t,i):((e,t)=>Object.assign({},t,{finisher(i){Object.assign(i.prototype[t.key],e)}}))(e,t),ge="adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,we=Symbol();class ye{constructor(e,t){if(t!==we)throw new Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=e}get styleSheet(){return void 0===this._styleSheet&&(ge?(this._styleSheet=new CSSStyleSheet,this._styleSheet.replaceSync(this.cssText)):this._styleSheet=null),this._styleSheet}toString(){return this.cssText}}const be=e=>new ye(String(e),we),ve=(e,...t)=>{const i=t.reduce((t,i,o)=>t+(e=>{if(e instanceof ye)return e.cssText;if("number"==typeof e)return e;throw new Error(`Value passed to 'css' function must be a 'css' function result: ${e}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`)})(i)+e[o+1],e[0]);return new ye(i,we)};i.d(t,"LitElement",(function(){return xe})),i.d(t,"defaultConverter",(function(){return Z})),i.d(t,"notEqual",(function(){return Y})),i.d(t,"UpdatingElement",(function(){return se})),i.d(t,"customElement",(function(){return ae})),i.d(t,"property",(function(){return ce})),i.d(t,"query",(function(){return ue})),i.d(t,"queryAll",(function(){return he})),i.d(t,"eventOptions",(function(){return fe})),i.d(t,"html",(function(){return M})),i.d(t,"svg",(function(){return U})),i.d(t,"TemplateResult",(function(){return k})),i.d(t,"SVGTemplateResult",(function(){return x})),i.d(t,"supportsAdoptingStyleSheets",(function(){return ge})),i.d(t,"CSSResult",(function(){return ye})),i.d(t,"unsafeCSS",(function(){return be})),i.d(t,"css",(function(){return ve})),
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
(window.litElementVersions||(window.litElementVersions=[])).push("2.2.1");const ke=e=>e.flat?e.flat(1/0):function e(t,i=[]){for(let o=0,r=t.length;o<r;o++){const r=t[o];Array.isArray(r)?e(r,i):i.push(r)}return i}(e);class xe extends se{static finalize(){super.finalize.call(this),this._styles=this.hasOwnProperty(JSCompiler_renameProperty("styles",this))?this._getUniqueStyles():this._styles||[]}static _getUniqueStyles(){const e=this.styles,t=[];if(Array.isArray(e)){ke(e).reduceRight((e,t)=>(e.add(t),e),new Set).forEach(e=>t.unshift(e))}else e&&t.push(e);return t}initialize(){super.initialize(),this.renderRoot=this.createRenderRoot(),window.ShadowRoot&&this.renderRoot instanceof window.ShadowRoot&&this.adoptStyles()}createRenderRoot(){return this.attachShadow({mode:"open"})}adoptStyles(){const e=this.constructor._styles;0!==e.length&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow?ge?this.renderRoot.adoptedStyleSheets=e.map(e=>e.styleSheet):this._needsShimAdoptedStyleSheets=!0:window.ShadyCSS.ScopingShim.prepareAdoptedCssText(e.map(e=>e.cssText),this.localName))}connectedCallback(){super.connectedCallback(),this.hasUpdated&&void 0!==window.ShadyCSS&&window.ShadyCSS.styleElement(this)}update(e){super.update(e);const t=this.render();t instanceof k&&this.constructor.render(t,this.renderRoot,{scopeName:this.localName,eventContext:this}),this._needsShimAdoptedStyleSheets&&(this._needsShimAdoptedStyleSheets=!1,this.constructor._styles.forEach(e=>{const t=document.createElement("style");t.textContent=e.cssText,this.renderRoot.appendChild(t)}))}render(){}}xe.finalized=!0,xe.render=(e,t,i)=>{if(!i||"object"!=typeof i||!i.scopeName)throw new Error("The `scopeName` option is required.");const o=i.scopeName,r=V.has(t),n=H&&11===t.nodeType&&!!t.host,s=n&&!G.has(o),l=s?document.createDocumentFragment():t;if(((e,t,i)=>{let o=V.get(t);void 0===o&&(a(t,t.firstChild),V.set(t,o=new P(Object.assign({templateFactory:R},i))),o.appendInto(t)),o.setValue(e),o.commit()})(e,l,Object.assign({templateFactory:J(o)},i)),s){const e=V.get(l);V.delete(l);const i=e.value instanceof b?e.value.template:void 0;X(o,l,i),a(t,t.firstChild),t.appendChild(l),V.set(t,e)}!r&&n&&window.ShadyCSS.styleElement(t.host)}},function(e,t,i){"use strict";var o=this&&this.__awaiter||function(e,t,i,o){return new(i||(i=Promise))((function(r,n){function s(e){try{l(o.next(e))}catch(e){n(e)}}function a(e){try{l(o.throw(e))}catch(e){n(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=i(1),n=i(7),s=i(0),a=i(4),l=i(3);class d extends r.LitElement{constructor(){super(...arguments),this.points=0,this.levels=a.levels,this.i=0,this.n=0,this.l=0,this.ref=!1,this.speech=window.speechSynthesis,this.oldValue="A2"}static get properties(){return{}}static get styles(){return[r.css`
        :host {
          background: white;;
          width: 100vw;
          height: 100vh;
         
          --global-font: "Cabin", sans-serif;
          --global-color: #7fb2ff;
          --mobile-background-color: #ccd4e0;
          --mobile-top: linear-gradient(to bottom, #a57fff, #63bda2);
          --mobile-bottom: linear-gradient(to top, #a57fff, #63bda2);
          --mobile-global: #87c0c0;
          --desktop-color: #a57fff;
          --warn-color: #fff27f;
          --bad-color: #ffb27f;
          --good-color: #7dffaf;
          overflow: hidden;
        }
        
        #title {
          font-family: var(--global-font);
          font-size: 2rem;
        }
        #menubutton:hover{
          transform: scale(1.2);
          cursor: pointer;
        }
        #container {
          display: flex;
          width: 100%;
          justify-content: center;
          text-align: center;
          height: 100%;
        }
        input {
          outline: 1px solid white;
          border: none;
          animation: borderFlicker 0.4s infinite alternate-reverse;
        }

        @keyframes borderFlicker {
          100% {
            outline: 1px var(--global-color) solid;
          }
        }
        @keyframes wrong {
          to {
            background-color: var(--bad-color);
            color: white;
            outline: 1px solid var(--bad-color);
          }
        }

        input,
        .theword {
          width: 20vw;
          height: 30vh;
          font-size: 200%;
          display: flex;
          align-items: center;
          justify-content: center;
          text-align: center;
          font-family: var(--global-font);
         
        }
        input{
          background-color:  transparent;
          color: var(--global-color);
          outline: 1px solid transparent;
        }
 
        @keyframes stop {
          to {
            outline: 1px solid var(--global-color);
          }
        }
        .theword {
          cursor: pointer;
          border: 1px solid var(--global-color);
          background-color:  var(--global-color);
          color: white;
        }
        select {
          justify-self: flex-start;
          padding: 0.6rem;
          width: max-content;
          background-color: white;
          font-family: var(--global-font);
          color: black;
          border: 1px solid black;
          margin-top: .6rem;
        }

        option {
          padding: 0.4rem;
          font-family: var(--global-font);
          font-size: 120%;
          background-color: white;
          color: black;
          border: 1px solid black;
        }

        #below {
          display: flex;
          margin-top: 6vh;
          width: 100%;
          height: 2.4rem;
          font-size: 140%;
          justify-content: center;
          color: black;
          font-family: var(--global-font);
        }
       

        .icon {
          object-fit: contain;
          background-color: transparent;
          width: 4.2rem;
          height: 1.8rem;
          margin-left: 1rem;
        }

        .flip-card {
          background-color: transparent;
          width: 20vw;
          height: 30vh;
          perspective: 1000px;
        }

        .flip-card-inner {
          position: relative;
          width: 100%;
          height: 100%;
          text-align: center;
          transition: transform 0.8s;
          transform-style: preserve-3d;
        }

        .flip-card-front,
        .flip-card-back {
          position: absolute;
          width: 100%;
          height: 100%;
          backface-visibility: hidden;
        }
        #points {
            border: none;
            background: transparent;
            color: white;
          width: max-content;
          height: max-content;
          font-size: 1rem;
        
          font-family: var(--global-font);
        }

        .flip-card-back {
          cursor: pointer;
          background-color: var(--global-color);
          color: white;
          display: flex;
          justify-content: center;
          align-items: center;
          font-family: var(--global-font);
          font-size: 200%;
          transform: rotateY(180deg);
          outline: 1px solid var(--global-color);
        }
        #translationbox {
          width: 100%;
          text-align: center;
          height: max-content;
          background-color: transparent;
          color: black;
          padding: 0.2rem;
          font-size: 130%;
          margin-top: 20vh;
          margin-bottom: 4vh;
          z-index: 997;
          font-family: var(--global-font);
        }

        #speaker {
          font-family: Arial, Helvetica, sans-serif;
          font-size: 80%;
          margin-left: 0.7rem;
          width: 1.6rem;
          height: 1.6rem;
        }

        .hoverable {
          cursor: pointer;
          transform: scale(1.1);
        }

        #buttons {
          display:flex;
            background: var(--desktop-color);
            justify-content: space-between;
            height: 10vh;
            align-items: center;
            padding-left: 2%;
            padding-right: 2%;
            width: 96%;
            color: white;
          }
        
        .modal {
          display: flex;
          justify-content: center;
          align-items: center;
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100vh;
          z-index: 999;
        }
        
        
        @keyframes accepted {
          to {
            background-color: var(--global-color);
            color: white;
            outline: 1px solid var(--global-color);
          }
        }

        .box {
          font-size: 2rem;
          background-color: white;
          display: flex;
          flex-direction: column;
          justify-content: center;
          color: black;
          width: 60%;
          padding: 1rem;
          box-shadow: 3px 3px 6px gray;
          font-family: var(--global-font);
          text-align: center;
        }

        @media only screen and (max-width: 600px) {
          :host {
            background-image: none;
           
          }
          .flip-card,
          input,
          .theword {
            width: 30vw;
            height: 20vh;
            font-size: 80%;
            padding-left: 0.1rem;
            padding-right: 0.1rem;
          }
          .flip-card-back {
            font-size: 90%;
          }
          #below {
            position: absolute;
            bottom: 0;
            left: 0;
            display: flex;
            margin-bottom: 0;
            background: var(--desktop-color);
            height: 8vh;
            align-items: center;
            color: black;
            width: 100%;
            justify-content: center;
            color: white;

          }
          #points {
            border: none;
            background: transparent;
            color: white;
          }
          #buttons {

            background: var(--desktop-color);
         
          }
          
        #title{
          font-size: 1rem;
        }
        #wrapper {
           display: flex;
          flex-direction: column;
          align-content: center;
          align-items: center;
          justify-content: center;
          justify-items: center;
          width: 100%;
          height: 100%;
          position: absolute;
          top: 0;
          left: 0;
          margin: 0;
          padding: 0;
        }
          #translationbox  {
            margin-top: 22vh;
            height: max-content;
            width: 80vw;
            text-align: center;
          }
         
          #buttons > svg {
            fill: white;
          }
          #speaker {
            margin-left: 0.3rem;
            font-size: 100%;
            width: 1rem;
            height: 1rem;
          }
          
          #box {
            font-size: 1.4rem;
            width: 90%;
            box-shadow: 3px 3px 3px gray;
          }
        }
      `]}firstUpdated(e){super.firstUpdated(e),this.profileCard=this.shadowRoot.querySelector("#settings"),this.points=this.pointCollection.A2,this.container=this.shadowRoot.querySelector("#container"),this.congratulations=this.shadowRoot.querySelector("#congratulations"),this.congratulations.style.display="none",this.data=this.levels.A2,this.l=Object.entries(this.data).length,this.i=Math.floor(Math.random()*this.l),this.n=Math.floor(3*Math.random());let t=Object.entries(this.data)[this.i];t[0].includes(" ")?this.translation=Object.values(t)[0].toString():this.translation=t[0];let i=t.slice(0);this.correctWord=Array.from(i[1]),this.greet(),this.requestUpdate()}greet(){setTimeout(()=>{this.shadowRoot.querySelector("#greeting").style.display="none",this.wordsAnimation()},2400)}wordsAnimation(){requestAnimationFrame(()=>{Array.from(this.shadowRoot.querySelectorAll(".theword, input")).forEach((e,t)=>{e.animate([{transform:"translateY(-20px)"},{transform:"translateY(0px)"}],{duration:600,delay:100*t})})})}selectionChoice(e){"All"===e?Object.values(this.levels).map(e=>this.data=Object.assign({},e)):this.data=this.levels[`${e}`],this.points=this.pointCollection[`${e}`],requestAnimationFrame(()=>{this.wordsAnimation()}),this.refreshNumber()}menuFunctionality(){this.profileCard.style.transform="translateX(0vw)",requestAnimationFrame(()=>{this.shadowRoot.querySelector("#wrapper").onclick=()=>{this.profileCard.style.transform="translateX(-80vw)",requestAnimationFrame(()=>{this.shadowRoot.querySelector("#wrapper").onclick=null})}})}pointsAddition(){this.points=this.points+1,this.pointCollection[`${this.oldValue}`]=this.points,s.writeUserData(this.user.uid,this.pointCollection,this.user.name),this.requestUpdate(),this.profileCard.requestUpdate()}showTheAnswer(){this.shadowRoot.querySelector(".flip-card-inner").style.transform="rotateY(180deg)",this.requestUpdate()}congratulate(){let e=this.shadowRoot.querySelector("#points");if(this.points%5==0&&(document.querySelector("#canvas").style.display="block",e.animate([{transform:"scale(1.2) rotate(5deg) translateX(-10px)"},{transform:"scale(1.3) rotate(-5deg) translateX(-10px)"},{transform:"scale(1) rotate(0deg) translateX(0px)"}],{duration:1e3}),this.points%10==0)){let e={target:"canvas"};new n.default(e).render(),this.points%60==0&&(this.congratulations.style.display="flex")}}logingOut(){window.firebase.auth().signOut().then(()=>{this.user=null,localStorage.removeItem("user-info"),localStorage.removeItem("points"),l.showLog("Zostałeś wylogowany","Wracaj szybciutko, już tęsknimy!",!0,!1)})}hoverable(e){e.preventDefault(),e.target.classList.add("hoverable"),e.target.addEventListener("mouseout",e=>{e.target.classList.remove("hoverable")})}flicker(){if(1===this.points){Array.from(this.shadowRoot.querySelectorAll(".theword")).forEach(e=>{e.style.opacity="0",e.style.transition=".3s"})}}refreshNumber(){requestAnimationFrame(()=>{"none"===this.congratulations.style.display&&setTimeout((function(){document.querySelector("#canvas").style.display="none"}),1e3),Array.from(this.shadowRoot.querySelectorAll(".theword")).forEach(e=>{e.style.opacity="1"}),this.n=Math.floor(3*Math.random()),this.l=Object.entries(this.data).length,this.i=Math.floor(Math.random()*this.l);let e=Object.entries(this.data)[this.i];e[0].includes(" ")?this.translation=Object.values(e)[0].toString():this.translation=e[0];let t=e.slice(0);this.correctWord=Array.from(t[1]),this.shadowRoot.querySelector("#input").value="",this.shadowRoot.querySelector("#input").style.animation="borderFlicker .6s infinite alternate-reverse",this.ref=!1,this.shadowRoot.querySelector(".flip-card-inner").style.transform="rotateY(0deg)",this.requestUpdate()})}readTheWord(e){let t=new SpeechSynthesisUtterance(e);t.rate=.7;let i=this.speech.getVoices();t.voice=i[10],t.lang="en-US",this.speech.speak(t)}updated(e){super.updated(e),requestAnimationFrame(()=>{this.shadowRoot.querySelector("#input").focus()})}render(){return r.html`
   <profile-card @logout="${this.logingOut}" @previousValue="${e=>{this.oldValue=e.detail.oldValue()}}" @valueSelected="${e=>{this.selectionChoice(e.detail.newValue())}}" id="settings" .userName="${this.user.name}" .userEmail="${this.user.email}" .userid="${this.user.uid}" .pointCollection="${this.pointCollection}"></profile-card>
 <div class="modal" id="greeting"> 
           <div class="box"> <p> ${this.greetingMessage}, ${this.user.name}!</p></div>
        </div>
    <div class="modal" id="congratulations" @click="${()=>{this.congratulations.style.display="none",setTimeout((function(){document.querySelector("#canvas").style.display="none"}),1e3)}}"> 
        <div class="box">
            <p>Świetnie Ci idzie, ${this.user.name.split(" ")}!</p>
            <p>Może pora przenieść się na wyższy poziom?</p></div>
          
        </div></div>
 <div id="wrapper">
    <div id="buttons">
    <img id="menubutton" src="./img/burger.svg" @click="${this.menuFunctionality}">
      <p id="title">English Verbs Game</p>
<div id="points">${"All"!==this.oldValue?`Poziom ${this.oldValue}:`:"Wymieszane poziomy:"} ${this.points}</div>
</div>
<div id="translationbox">Tłumaczenie: ${this.translation}</div>
    <div id="container">
    
    ${void 0===this.correctWord?void 0:this.correctWord.map((e,t)=>t!==this.n?r.html`
          <div
            class="theword"
            @click="${()=>{this.readTheWord(e)}}"
            @mouseover="${e=>{this.hoverable(e)}}"
          >
            <span class="word"
              >${Array.isArray(e)?e.join(" "):e}</span
            ><span id="speaker"><img src="./img/soundwhite.svg"/></span>
          </div>
        `:r.html`
            <div class="flip-card">
  <div class="flip-card-inner">
    <div class="flip-card-front">
    <input id="input" data-value="${e}" type="text" @keydown="${t=>{if(this.profileCard.style.transform="translateX(-80vw)",0!==t.target.value.length&&(t.target.style.animation="stop .3s forwards"),13===t.keyCode)if(Array.isArray(e)){e.join().toLowerCase().includes(t.target.value.toString().toLowerCase())?(this.pointsAddition(),this.flicker(),this.congratulate(),1===this.points?(t.target.style.animation="accepted .3s forwards .1s",setTimeout(()=>{this.refreshNumber()},1200)):(t.target.style.animation="accepted .3s forwards",setTimeout(()=>{this.refreshNumber()},400))):(t.target.style.animation="wrong .3s forwards",this.ref=!0,this.requestUpdate())}else t.target.value.toLowerCase()===e?(this.pointsAddition(),this.flicker(),this.congratulate(),1===this.points?(t.target.style.animation="accepted .3s forwards .1s",setTimeout(()=>{this.refreshNumber()},1200)):(t.target.style.animation="accepted .3s forwards",setTimeout(()=>{this.refreshNumber()},400))):(t.target.style.animation="wrong .3s forwards .1s",this.ref=!0,this.requestUpdate())}}">
    </div>
    <div  @click="${()=>{this.readTheWord(e)}}" class="flip-card-back">
      <span class="word">${Array.isArray(e)?e.join(" "):e}</span><span id="speaker"><img src="./img/soundwhite.svg"></span></span>
    </div>
  </div>
</div>
            `)}
               
    </div>
    
    
   <div id="below"><a id="skip" @mouseover="${e=>{this.hoverable(e)}}" @click="${this.refreshNumber}">Inne słowo</a> ${this.ref?r.html`
            <a @click="${this.showTheAnswer}"
              ><img
                @mouseover="${e=>{this.hoverable(e)}}"
                class="icon"
                src="./img/eye.svg"
            /></a>
          `:void 0}</div></div>
  
    `}}t.EnglishVerbsGame=d,customElements.define("english-verbs",d),t.showTheGame=function(e,t,i,r,n="Witaj"){return o(this,void 0,void 0,(function*(){document.body.classList.add("ready"),localStorage.removeItem("isRedirecting");const o=yield new d;return o.greetingMessage=n,o.user={email:t,uid:i,name:e},o.pointCollection=r,null===document.querySelector(".welcome")?document.body.removeChild(document.querySelector("#log")):(null!==document.querySelector("#log")&&document.body.removeChild(document.querySelector("#log")),document.body.removeChild(document.querySelector(".welcome"))),document.body.appendChild(o),o}))}},function(e,t,i){"use strict";var o=this&&this.__awaiter||function(e,t,i,o){return new(i||(i=Promise))((function(r,n){function s(e){try{l(o.next(e))}catch(e){n(e)}}function a(e){try{l(o.throw(e))}catch(e){n(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=i(1),n=i(0);class s extends r.LitElement{static get styles(){return[r.css`
				.welcome {
					width: 100%;
					height: 100vh;
					display: flex;
					flex-direction: row;
					align-items: center;
					justify-content: center;
					background-image: url("./img/wave1.svg");
					background-size: contain;
					background-repeat: repeat-x;
					background-position: bottom;
				}
				.wiadomosc {
					margin-right: 13rem;
					display: flex;
					flex-direction: column;
					align-items: center;
					justify-content: center;
					width: 20vw;
					height: max-content;
				}
				.wiadomoscoff {
					display: flex;
					flex-direction: column;
					align-items: center;
					justify-content: center;
					width: 30vw;
					height: max-content;
					background: white;
					box-shadow: 1px 4px 6px gray;
					padding: 2rem;
				}
				#witaj,
				.info {
					font-family: 'Montserrat', sans-serif;
					font-size: 1.3rem;
					text-align: center;
				}
				.logowanie {
					cursor: pointer;
					justify-self: flex-start;
					padding: .6rem;
					width: max-content;
					background-color: transparent;
					font-size: 1.2rem;
					border: 1px solid black;
					box-shadow: 1px 1px 3px gray;
				}

				.sadcat {
					width: 6rem;
					height: 6rem;
				}
				#nowekonto {
					cursor: pointer;
					border: none;
					background: none;
					font-size: 1rem;
					margin-top: .2rem;
				}

				.logowanie:hover {
					transition: 1s;
					color: white;
					border: 1px solid white;
					background: linear-gradient(to top, #a57fff, #63bda2);
				}
				@media screen and (max-width: 600px) {
					.wiadomosc,
					.wiadomoscoff {
						width: 68vw;
						background: white;
						box-shadow: 1px 3px 6px gray;
						margin: 0;
						padding-bottom: 2rem;
					}
				}
			`]}logOut(){this.dispatchEvent(new CustomEvent("logout",{bubbles:!0,composed:!0})),this.requestUpdate()}render(){return r.html`   
		<div class="welcome">
		<div class="wiadomoscoff">
		<img class="sadcat" src="./img/ghost.svg">
		
		<p id="witaj">${this.title}</p>
		<p class="info">${this.message}</p>
		${this.logButton?r.html`<button class="logowanie" @click="${n.redirectingSignUp}">Zaloguj się ponownie</button>`:void 0}
		
	</div></div>
	  `}}t.LogScreen=s,customElements.define("log-screen",s),t.showLog=function(e,t,i=!1,r=!1){return o(this,void 0,void 0,(function*(){const o=yield new s;return o.title=e,o.message=t,o.sadCat=r,o.logButton=i,o.id="log",document.body.removeChild(document.body.lastChild),document.body.appendChild(o),o}))}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.levels={A2:{"śnić, marzyć":["dream",["dreamed","dreamt"],["dreamed","dreamt"]],"być":["be","was","been"],"robić":["do","did","done"],"stawać się":["become","became","become"],"łamać, pękać, rozbić, tłuc":["break","broke","broken"],"przynosić, przyprowadzić":["bring","brought","brought"],"budować":["build","built","built"],"kupować":["buy","bought","bought"],"łapać":["catch","caught","caught"],"wybierać":["choose","chose","chosen"],"przyjść, przyjechać":["come","came","come"],"kosztować":["cost","cost","cost"],"ciąć, kroić, skaleczyć":["cut","cut","cut"],"rysować, pociągnąć, remisować":["draw","drew","drawn"],"prowadzić, kierować się czymś":["drive","drove","driven"],"pić":["drink","drank","drunk"],"jeść":["eat","ate","eaten"],"padać, upadać, spadać":["fall","fell","fallen"],"czuć":["feel","felt","felt"],"znaleźć":["find","found","found"],"latać":["fly","flew","flown"],"dostawać":["get","got","got"],"dawać":["give","gave","given"],"iść":["go","went","gone"],"rosnąć":["grow","grew","grown"],"mieć":["have","had","had"],"słyszeć":["hear","heard","heard"],"uderzać":["hit","hit","hit"],"trzymać, utrzymywać, podtrzymywać":["hold","held","held"],"ranić, boleć":["hurt","hurt","hurt"],"trzymać":["keep","kept","kept"],"znać, wiedzieć":["know","knew","known"],"uczyć się":["learn",["learnt","learned"],["learnt","learned"]],"opuszczać, wyjeżdżać, zostawiać":["leave","left","left"],"pożyczać (komuś)":["lend","lent","lent"],"tracić, zgubić":["lose","lost","lost"],"robić, wykonywać":["make","made","made"],"znaczyć, oznaczać, mieć na myśli":["mean","meant","meant"],"spotykać, poznać":["meet","met","met"],"płacić":["pay","paid","paid"],"kłaść":["put","put","put"],"czytać":["read","read","read"],"jeździć":["ride","rode","ridden"],"dzwonić":["ring","rang","rung"],biec:["run","ran","run"],"mowić":["say","said","said"],"widzieć":["see","saw","seen"],"sprzedawać":["sell","sold","sold"],"wysyłać, słać":["send","sent","sent"],"pokazywać":["show","showed","shown"],"zamykać":["shut","shut","shut"],"śpiewać":["sing","sang","sung"],"siedzieć, siadać":["sit","sat","sat"],"spać":["sleep","slept","slept"],"mówić, rozmawiać":["speak","spoke","spoken"],"spędzać, wydawać":["spend","spent","spent"],"stać":["stand","stood","stood"],"kraść":["steal","stole","stolen"],"pływać":["swim","swam","swum"],"brać":["take","took","taken"],"uczyć (kogoś)":["teach","taught","taught"],"powiedzieć, opowiedzieć":["tell","told","told"],"myśleć, sądzić, uważać":["think","thought","thought"],"rzucać":["throw","threw","thrown"],"budzić":["wake","woke","woken"],"nosić, zakładać":["wear","wore","worn"],"rozumieć":["understand","understood","understood"],"wygrywać":["win","won","won"],"pisać":["write","wrote","written"]},B1:{"obudzić":["awake","awoke","awoken"],"bić":["beat","beat","beaten"],"ugryźc":["bite","bit","bitten"],"krwawić":["bleed","bled","bled"],"wiać, dmuchać":["blow","blew","blown"],"palić, parzyć, płonąć":["burn",["burned","burnt"],["burned","burnt"]],"kopać (np ziemię)":["dig","dug","dug"],"karmić, żywić":["feed","fed","fed"],"walczyć, bić się":["fight","fought","fought"],"zapominać":["forget","forgot","forgotten"],"wybaczać":["forgive","forgave","forgiven"],"zamarzać":["freeze","froze","frozen"],"zawieszać (coś, np obraz)":["hang","hung","hung"],"chować, ukrywać":["hide","hid","hidden"],"pozwalać":["let","let","let"],"leżeć, kłaść się":["lie","lay","lain"],"zapalać, rozpalać, oświetlać":["light",["lighted","lit"],["ligthed","lit"]],"rzucać, opuszczać":["quit","quit","quit"],"podnosić, wzrastać":["rise","rose","risen"],"trząść, potrząsać":["shake","shook","shaken"],"świecić, błyszczeć":["shine","shone","shone"],"strzelać":["shoot","shot","shot"],"tonąć (o statku), zapadać się":["sink","sank","sunk"],"wbijać, wtykać, przyklejać, wystawić":["stick","stuck","stuck"],"uderzyć, wybijać":["strike","struck","struck"],"drzeć, rozdzierać":["tear","tore","torn"]},B2:{"znosić, udźwignąć coś, żywić urazę":["bear","bore","borne"],"zginać, nachylać":["bend","bent","bent"],"hodować, wychować, rozmażać się":["breed","bred","bread"],"rzucić, zrzucić":["cast","cast","cast"],"rozdawać, postępować, mieć do czynienia, radzić sobie":["deal","dealt","dealt"],"zabraniać":["forbid","forbade","forbidden"],"klęczeć, klękać":["kneel",["kneeled","knelt"],["kneeled","knelt"]],"robić na drutach":["knit",["knit","knitted"],["knit","knitted"]],"prowadzić":["lead","led","led"],"szukać, poszukiwać":["seek","sought","sought"],"umieszczać, ustawiać, zachodzić (o słońcu), osadzić, nastawić, wyznaczyć":["set","set","set"],"kurczyć się, zbiegać":["shrink","shrank","shrunk"],"ślizgać się, zjeżdżać":["slide","slid","slid"],"dzielić, rozdzielać":["split","split","split"],"rozchodzić się, rozprzestrzeniać, rozkładać, rozpościerać, rozsmarować":["spread","spread","spread"],"przysięgać, przeklinać":["swear","swore","sworn"],"zamiatać, zmiatać":["sweep","swept","swept"],"machnąć, zakołysać":["swing","swung","swung"]},C1:{"pojawić się":["arise","arose","arisen"],"zakładać, obstawiać":["bet","bet","bet"],"umykać, uciekać, opuścić":["flee","fled","fled"],"położyć, kłaść":["lay","laid","laid"],"kręcić, zakręcić czymś/się, obrócić":["spin","spun","spun"],"śmierdzieć, cuchnąć":["stink","stank","stunk"]},C2:{"wiązać, złączyć, oprawić (książkę)":["bind","bound","bound"],"przywrzeć, uczepić się, trzymać się kurczowo":["cling","clung","clung"],"skradać się, zakradać, piąć się, podchodzić":["creep","crept","crept"],"rzucić, cisnąć":["fling","flung","flung"],"porzucać, zaniechać, opuścić":["forsake","forsook","forsaken"],"przepowiadać, przewidywać":["foretell","foretold","foretold"],"zemleć, rozkruszyć, zgrzytać, ostrzyć, trzeć":["grind","ground","ground"],"skakać":["leap",["leaped","lept"],["leaped","lept"]],"piłować":["saw","sawed","sawn"],"zrzucać, pozbywać się":["shed","shed","shed"],"zabijać":["slay","slew","slain"],"cisnąć, miotać":["sling","slung","slung"],"przeskakiwać, wyskakiwać":["spring","sprang","sprung"],"żądlić":["sting","stung","stung"],"zmagać się z czymś, dążyć, starać się, podejmować wysiłek":["strive","strove","striven"],"kroczyć, stąpać, deptać":["tread","trod","trodden"],"płakać, szlochać":["weep","wept","wept"],"nawijać, nakręcać, wić się":["wind","wound","wound"],"wykręcić, wyżąć coś, wycisnąć":["wring","wrung","wrung"]}}},function(e,t,i){"use strict";var o=this&&this.__awaiter||function(e,t,i,o){return new(i||(i=Promise))((function(r,n){function s(e){try{l(o.next(e))}catch(e){n(e)}}function a(e){try{l(o.throw(e))}catch(e){n(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=i(1),n=i(0);class s extends r.LitElement{static get styles(){return[r.css`
				:host {
					position: absolute;
					top: 0;
					left: 0;
					width: 100%;
					height: 100vh;
					display: flex;
					flex-direction: row;
					align-items: center;
					justify-content: center;
					z-index: 999;
				}
				.wiadomosc {
					margin-right: 13rem;
					display: flex;
					flex-direction: column;
					align-items: center;
					justify-content: center;
					width: 20vw;
					height: max-content;
				}
				.wiadomoscoff {
					display: flex;
					flex-direction: column;
					align-items: center;
					justify-content: center;
					width: 30vw;
					height: max-content;
					background: white;
					box-shadow: 1px 4px 6px gray;
					padding: 2rem;
				}
				#witaj,
				.info {
					font-family: 'Montserrat', sans-serif;
					font-size: 1.3rem;
					text-align: center;
					width: 100%;
				}
				.info {
					resize: none;
					font-size: 1rem;
					height: 20vh;
					text-align: left;
					margin-bottom: 1rem;
					text-overflow: scroll;
				}

				.logowanie {
					cursor: pointer;
					justify-self: flex-start;
					padding: .6rem;
					width: max-content;
					background-color: transparent;
					font-size: 1.2rem;
					border: 1px solid black;
					box-shadow: 1px 1px 3px gray;
				}
				#close {
					cursor: pointer;
					margin-top: -1rem;
					align-self: flex-end;
					font-family: 'Montserrat', sans-serif;
				}

				.sadcat {
					width: 6rem;
					height: 6rem;
				}
				#nowekonto {
					cursor: pointer;
					border: none;
					background: none;
					font-size: 1rem;
					margin-top: .2rem;
				}

				.logowanie:hover {
					transition: 1s;
					color: white;
					border: 1px solid white;
					background: linear-gradient(to top, #a57fff, #63bda2);
				}
				@media screen and (max-width: 600px) {
					.wiadomosc,
					.wiadomoscoff {
						width: 80vw;
						background: white;
						box-shadow: 1px 3px 6px gray;
						margin: 0;
						padding-bottom: 2rem;
					}
				}
			`]}sendInfo(e){e.preventDefault();let t=this.shadowRoot.querySelector(".info").value;n.reportBugToServer(this.userid,t),this.shadowRoot.querySelector("#witaj").textContent="Dziękujemy za zgłoszenie",this.shadowRoot.querySelector(".info").style.display="none",this.shadowRoot.querySelector(".logowanie").style.display="none",this.shadowRoot.querySelector("#close").style.display="none",setTimeout((function(){document.body.removeChild(document.querySelector("#reportbug"))}),3e3)}render(){return r.html` 
		<form @submit="${e=>{this.sendInfo(e)}}">
		<div class="wiadomoscoff">
		<span @click="${e=>{this.addEventListener("click",()=>{document.body.removeChild(document.querySelector("#reportbug"))})}}" id="close">X</span>
		<p id="witaj">Opisz swój problem w okienku poniżej:</p>
		<textarea class="info"></textarea>
		<button type="submit" class="logowanie">Wyślij</button>
		
	</div>
	</form>
	  `}}t.ReportBug=s,customElements.define("report-bug",s),t.reportBug=function(e){return o(this,void 0,void 0,(function*(){const t=yield new s;return t.userid=e,t.id="reportbug",document.body.appendChild(t),t}))}},function(e,t,i){"use strict";var o=this&&this.__awaiter||function(e,t,i,o){return new(i||(i=Promise))((function(r,n){function s(e){try{l(o.next(e))}catch(e){n(e)}}function a(e){try{l(o.throw(e))}catch(e){n(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};function r(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),r(i(2)),r(i(4)),r(i(0)),r(i(8)),r(i(3)),r(i(5));const n=i(2);"localhost"!==location.hostname&&"serviceWorker"in navigator&&window.addEventListener("load",()=>{navigator.serviceWorker.register("sw.js")}),window.onload=e=>{!function(){o(this,void 0,void 0,(function*(){if(null!==localStorage.getItem("user-info")){let e=JSON.parse(localStorage.getItem("user-info")).user.uid;yield window.firebase.database().ref("/users/"+e).once("value").then((function(e){let t=e.val()&&e.val().points||{A2:0,B1:0,B2:0,C1:0,C2:0,All:0};localStorage.setItem("points",JSON.stringify({points:t}))}));n.showTheGame(JSON.parse(localStorage.getItem("user-info")).user.displayName,JSON.parse(localStorage.getItem("user-info")).user.email,JSON.parse(localStorage.getItem("user-info")).user.uid,JSON.parse(localStorage.getItem("points")).points)}}))}()}},function(e,t,i){"use strict";i.r(t),t.default=function(e){var t={target:"confetti-holder",max:80,size:1,animate:!0,props:["circle","square","triangle","line"],colors:[[165,104,246],[230,61,135],[0,199,228],[253,214,126]],clock:25,interval:null,rotate:!1,width:window.innerWidth,height:window.innerHeight};e&&(e.target&&(t.target=e.target),e.max&&(t.max=e.max),e.size&&(t.size=e.size),void 0!==e.animate&&null!==e.animate&&(t.animate=e.animate),e.props&&(t.props=e.props),e.colors&&(t.colors=e.colors),e.clock&&(t.clock=e.clock),e.width&&(t.width=e.width),e.height&&(t.height=e.height),void 0!==e.rotate&&null!==e.rotate&&(t.rotate=e.rotate));var i=document.getElementById(t.target),o=i.getContext("2d"),r=[];function n(e,t){e||(e=1);var i=Math.random()*e;return t?Math.floor(i):i}var s=t.props.reduce((function(e,t){return e+(t.weight||1)}),0);function a(){var e=t.props[function(){for(var e=Math.random()*s,i=0;i<t.props.length;++i){var o=t.props[i].weight||1;if(e<o)return i;e-=o}}()];return{prop:e.type?e.type:e,x:n(t.width),y:n(t.height),src:e.src,radius:n(4)+1,size:e.size,rotate:t.rotate,line:Math.floor(n(65)-30),angles:[n(10,!0)+2,n(10,!0)+2,n(10,!0)+2,n(10,!0)+2],color:t.colors[n(t.colors.length,!0)],rotation:n(360,!0)*Math.PI/180,speed:n(t.clock/7)+t.clock/30}}function l(e){var i=e.radius<=3?.4:.8;switch(o.fillStyle=o.strokeStyle="rgba("+e.color+", "+i+")",o.beginPath(),e.prop){case"circle":o.moveTo(e.x,e.y),o.arc(e.x,e.y,e.radius*t.size,0,2*Math.PI,!0),o.fill();break;case"triangle":o.moveTo(e.x,e.y),o.lineTo(e.x+e.angles[0]*t.size,e.y+e.angles[1]*t.size),o.lineTo(e.x+e.angles[2]*t.size,e.y+e.angles[3]*t.size),o.closePath(),o.fill();break;case"line":o.moveTo(e.x,e.y),o.lineTo(e.x+e.line*t.size,e.y+5*e.radius),o.lineWidth=2*t.size,o.stroke();break;case"square":o.save(),o.translate(e.x+15,e.y+5),o.rotate(e.rotation),o.fillRect(-15*t.size,-5*t.size,15*t.size,5*t.size),o.restore();break;case"svg":o.save();var r=new Image;r.src=e.src;var n=e.size||15;o.translate(e.x+n/2,e.y+n/2),e.rotate&&o.rotate(e.rotation),o.drawImage(r,-n/2*t.size,-n/2*t.size,n*t.size,n*t.size),o.restore()}}return{render:function(){i.width=t.width,i.height=t.height,r=[];for(var e=0;e<t.max;e++)r.push(a());return requestAnimationFrame((function e(){for(var i in o.clearRect(0,0,t.width,t.height),r)l(r[i]);!function(){for(var e=0;e<t.max;e++){var i=r[e];t.animate&&(i.y+=i.speed),i.rotate&&(i.rotation+=i.speed/35),(i.speed>=0&&i.y>t.height||i.speed<0&&i.y<0)&&(r[e]=i,r[e].x=n(t.width,!0),r[e].y=i.speed>=0?-10:parseFloat(t.height))}}(),t.animate&&requestAnimationFrame(e)}))},clear:function(){t.animate=!1,clearInterval(t.interval),requestAnimationFrame((function(){o.clearRect(0,0,i.width,i.height);var e=i.width;i.width=1,i.width=e}))}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(1),r=i(5);class n extends o.LitElement{static get properties(){return{userName:{type:String,reflect:!0},userEmail:{type:String,reflect:!0},pointCollection:{type:Object,attribute:"pointcollection",reflect:!0}}}static get styles(){return[o.css`
				:host {
					transition: 1s;
					height: 100%;
					position: absolute;
					top: 0;
					left: 0;
					width: 20vw;
					background-color: gray;
					z-index: 998;
					transform: translateX(-80vw);
					display: flex;
					flex-direction: column;
					align-content: flex-start;
					font-family: var(--global-font);
					text-align: left;
					padding-left: 1vw;
					color: white;
				}
				#x {
					margin: 1rem 1rem 0 0;
					align-self: flex-end;
					color: white;
					cursor: pointer;
				}

				#signout,
				#bug {
					cursor: pointer;
				}
				p {
					margin-top: .8rem;
					margin-bottom: .8rem;
				}
				h1 {
					font-size: 1.4rem;
				}
				select {
					outline: 1px white solid;
					margin-top: .3rem;
					margin-left: none;
					padding: .3rem;
					border: none;
					background: white;
					color: black;
					width: 80%;
					-webkit-appearance: menulist;
					align-self: flex-start;
				}
				select > option {
					color: black;
				}
				label {
					align-self: flex-start;
				}
				#x:hover {
					transform: scale(1.2);
					cursor: pointer;
				}

				@media only screen and (max-width: 600px) {
					:host {
						width: 60vw;
					}
					p {
						margin-top: .8rem;
						margin-bottom: .8rem;
					}
					h1 {
						font-size: 1.4rem;
					}
				}
			`]}logOut(){this.dispatchEvent(new CustomEvent("logout",{bubbles:!0,composed:!0})),this.requestUpdate()}render(){return o.html`
  <h1>${this.userName}</h1>
  <p>${this.userEmail}</p>
  <label for="select">Zmień poziom:</label>
    <select @click="${e=>{this.dispatchEvent(new CustomEvent("previousValue",{bubbles:!0,composed:!0,detail:{oldValue:()=>this.shadowRoot.querySelector("#select").value}}))}}" @change="${e=>{this.dispatchEvent(new CustomEvent("valueSelected",{bubbles:!0,composed:!0,detail:{newValue:()=>this.shadowRoot.querySelector("#select").value}}))}}" id="select">
    ${Object.entries(this.pointCollection).map(([e,t])=>o.html`
  <option value="${e}">${"All"!=e?`Poziom ${e},`:"Wymieszane poziomy,"} punkty: ${t}</option>`)}
</select>

<p @click="${e=>{r.reportBug(this.userid)}}" id="bug">Zgłoś błąd</p>
<p id="signout" @click="${this.logOut}">Wyloguj</p>

    `}}t.ProfileCard=n,customElements.define("profile-card",n)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,